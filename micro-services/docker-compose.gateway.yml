services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - ./logs:/var/log/traefik
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --log.level=INFO
      - --log.filepath=/var/log/traefik/traefik.log
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      - --accesslog.format=json
      - --metrics.prometheus=true
      - --metrics.prometheus.addentrypointslabels=true
      - --metrics.prometheus.addserviceslabels=true
    networks:
      - microservices
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Base de données partagée pour les services
  auth-db:
    image: postgres:15-alpine
    container_name: auth-db
    environment:
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
      - POSTGRES_DB=auth_db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  store-db:
    image: postgres:15-alpine
    container_name: store-db
    environment:
      - POSTGRES_USER=store_user
      - POSTGRES_PASSWORD=store_password
      - POSTGRES_DB=store_db
    volumes:
      - store_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U store_user -d store_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  inventory-db:
    image: postgres:15-alpine
    container_name: inventory-db
    environment:
      - POSTGRES_USER=inventory_user
      - POSTGRES_PASSWORD=inventory_pass
      - POSTGRES_DB=inventory_db
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  # Service d'authentification
  auth-service:
    build: ./services/user-service
    container_name: auth-service
    environment:
      - NODE_ENV=production
      - PORT=3031
      - AUTH_DATABASE_URL=postgresql://auth_user:auth_password@auth-db:5432/auth_db
      - JWT_SECRET=your_super_secret_jwt_key_here_gateway
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      # Routes pour l'authentification
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`) || PathPrefix(`/api/users`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.services.auth.loadbalancer.server.port=3031"
      # Route pour la documentation Swagger
      - "traefik.http.routers.auth-docs.rule=PathPrefix(`/auth-docs`)"
      - "traefik.http.routers.auth-docs.entrypoints=web"
      - "traefik.http.routers.auth-docs.service=auth"
      - "traefik.http.middlewares.auth-docs-stripprefix.stripprefix.prefixes=/auth-docs"
      - "traefik.http.routers.auth-docs.middlewares=auth-docs-stripprefix"
    networks:
      - microservices

  # Service de gestion des magasins
  store-service:
    build: ./services/store-service
    container_name: store-service
    environment:
      - NODE_ENV=production
      - PORT=3032
      - STORE_DATABASE_URL=postgresql://store_user:store_password@store-db:5432/store_db
    depends_on:
      store-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      # Routes pour les magasins et stocks
      - "traefik.http.routers.store.rule=PathPrefix(`/api/stores`) || PathPrefix(`/api/stocks`)"
      - "traefik.http.routers.store.entrypoints=web"
      - "traefik.http.services.store.loadbalancer.server.port=3032"
      # Route pour la documentation Swagger
      - "traefik.http.routers.store-docs.rule=PathPrefix(`/store-docs`)"
      - "traefik.http.routers.store-docs.entrypoints=web"
      - "traefik.http.routers.store-docs.service=store"
      - "traefik.http.middlewares.store-docs-stripprefix.stripprefix.prefixes=/store-docs"
      - "traefik.http.routers.store-docs.middlewares=store-docs-stripprefix"
    networks:
      - microservices

  # Service de gestion des inventaires
  inventory-service:
    build: ./services/inventory-service
    container_name: inventory-service
    environment:
      - NODE_ENV=production
      - PORT=3033
      - DATABASE_URL=postgresql://inventory_user:inventory_pass@inventory-db:5432/inventory_db
      - AUTH_SERVICE_URL=http://auth-service:3031
      - STORE_SERVICE_URL=http://store-service:3032
    depends_on:
      inventory-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      # Routes pour l'inventaire et les produits
      - "traefik.http.routers.inventory.rule=PathPrefix(`/api/inventory`)"
      - "traefik.http.routers.inventory.entrypoints=web"
      - "traefik.http.services.inventory.loadbalancer.server.port=3033"
      # Route pour la documentation Swagger
      - "traefik.http.routers.inventory-docs.rule=PathPrefix(`/inventory-docs`)"
      - "traefik.http.routers.inventory-docs.entrypoints=web"
      - "traefik.http.routers.inventory-docs.service=inventory"
      - "traefik.http.middlewares.inventory-docs-stripprefix.stripprefix.prefixes=/inventory-docs"
      - "traefik.http.routers.inventory-docs.middlewares=inventory-docs-stripprefix"
    networks:
      - microservices

  # Service de monitoring et logging
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - microservices
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Interface pour visualiser les logs
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  auth_db_data:
  store_db_data:
  inventory_db_data:
  prometheus_data:
  grafana_data:

networks:
  microservices:
    driver: bridge