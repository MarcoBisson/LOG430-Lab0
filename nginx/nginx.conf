# Configuration NGINX Load Balancer simple (sans Lua)
# LOG430 - Laboratoire Infrastructure

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuration des logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;

    # Optimisations générales
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Configuration du cache basique
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;

    # Configuration des upstreams (backend servers)
    upstream backend_api {
        # Algorithme de répartition de charge
        least_conn;  # Connexions les moins chargées
        
        # Configuration des serveurs backend
        server backend-1:3030 weight=1 max_fails=3 fail_timeout=30s;
        server backend-2:3030 weight=1 max_fails=3 fail_timeout=30s;
        # server backend-3:3030 weight=1 max_fails=3 fail_timeout=30s;

        # Configuration de keepalive
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Upstream pour frontend
    upstream frontend_app {
        server frontend:5173;
    }

    # Configuration du serveur principal
    server {
        listen 80;
        server_name localhost;

        # Configuration générale
        client_max_body_size 10M;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;

        # Headers pour load balancing
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Route pour l'API backend avec cache
        location /api/ {
            # Configuration du cache simple
            proxy_cache api_cache;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            
            # Headers de cache
            add_header X-Cache-Status $upstream_cache_status;
            add_header X-Backend-Server $upstream_addr;
            
            # Variables pour bypass cache
            set $no_cache 0;
            if ($request_method != GET) {
                set $no_cache 1;
            }
            
            proxy_cache_bypass $no_cache;
            proxy_no_cache $no_cache;
            
            # Configuration du proxy
            proxy_pass http://backend_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Gestion des erreurs
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # Route pour Swagger UI (sans cache pour éviter les problèmes de mise à jour)
        location /api-docs {
            proxy_pass http://backend_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Headers spécifiques pour Swagger
            proxy_set_header Accept text/html,application/xhtml+xml,application/xml;
            
            # Désactiver le cache pour Swagger
            proxy_cache_bypass 1;
            proxy_no_cache 1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Route pour le frontend
        location / {
            proxy_pass http://frontend_app;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Cache stats endpoint (simplifié)
        location /nginx-cache-stats {
            access_log off;
            return 200 '{"cache":"nginx","status":"active","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Gestion des erreurs
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Configuration de gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
}
