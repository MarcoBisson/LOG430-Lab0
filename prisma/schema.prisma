// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
Test Product 4
model Product {
  id             Int                    @id @default(autoincrement())
  name           String
  price          Float
  description    String?
  category       String?
  saleItems      SaleItem[]
  storeStocks    StoreStock[]
  replenishments ReplenishmentRequest[]
}

model Store {
  id                    Int                    @id @default(autoincrement())
  name                  String
  address               String
  type                  StoreType              @default(SALES)
  sales                 Sale[]
  storeStocks           StoreStock[]
  replenishmentRequests ReplenishmentRequest[]
}

model StoreStock {
  id        Int     @id @default(autoincrement())
  store     Store   @relation(fields: [storeId], references: [id])
  storeId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int

  @@unique([storeId, productId])
}

model Sale {
  id        Int        @id @default(autoincrement())
  date      DateTime   @default(now())
  store     Store      @relation(fields: [storeId], references: [id])
  storeId   Int
  saleItems SaleItem[]
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  sale      Sale    @relation(fields: [saleId], references: [id])
  saleId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  unitPrice Float

  @@unique([saleId, productId])
}

model ReplenishmentRequest {
  id        Int                        @id @default(autoincrement())
  store     Store                      @relation(fields: [storeId], references: [id])
  storeId   Int
  product   Product                    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  status    ReplenishmentRequestStatus @default(PENDING)
  createdAt DateTime                   @default(now())

  @@unique([storeId, productId])
}

enum StoreType {
  SALES
  LOGISTICS
  HEADQUARTERS
}

enum ReplenishmentRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
