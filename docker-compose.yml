services:
  # Redis Cache Distribu√©
  redis:
    image: redis:7-alpine
    container_name: log430-lab0-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network
    environment:
      REDIS_REPLICATION_MODE: master

  # NGINX Load Balancer avec cache Redis
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '80:80'
    depends_on:
      redis:
        condition: service_healthy
      frontend:
        condition: service_started
      inventory-service:
        condition: service_started
      sales-service:
        condition: service_started
      store-service:
        condition: service_started
      user-service:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: docker.io/${DOCKER_USERNAME:-local}/log430-frontend:latest
    depends_on:
      - inventory-service
      - sales-service
      - store-service
      - user-service
    environment:
      VITE_API_URL: http://localhost/api
      Node_ENV: development
    restart: unless-stopped
    networks:
      - app-network

  # Inventory Microservice
  inventory-service:
    build:
      context: ./micro-services/services/inventory-service
      dockerfile: Dockerfile
    depends_on:
      inventory-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@inventory-postgres:5432/inventory_db
      NODE_ENV: production
      PORT: 3033
    restart: unless-stopped
    networks:
      - app-network

  # Inventory Database
  inventory-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: inventory_db
    volumes:
      - inventory-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d inventory_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Sales Microservice  
  sales-service:
    build:
      context: ./micro-services/services/sales-service
      dockerfile: Dockerfile
    depends_on:
      sales-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@sales-postgres:5432/sales_db
      NODE_ENV: production
      PORT: 3034
    restart: unless-stopped
    networks:
      - app-network

  # Sales Database
  sales-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: sales_db
    volumes:
      - sales-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d sales_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Store Microservice
  store-service:
    build:
      context: ./micro-services/services/store-service
      dockerfile: Dockerfile
    depends_on:
      store-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@store-postgres:5432/store_db
      NODE_ENV: production
      PORT: 3035
    restart: unless-stopped
    networks:
      - app-network

  # Store Database
  store-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: store_db
    volumes:
      - store-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d store_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # User Microservice
  user-service:
    build:
      context: ./micro-services/services/user-service
      dockerfile: Dockerfile
    depends_on:
      user-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@user-postgres:5432/user_db
      NODE_ENV: production
      PORT: 3036
    restart: unless-stopped
    networks:
      - app-network

  # User Database
  user-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: user_db
    volumes:
      - user-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d user_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  grafana-data:
  redis-data:
  inventory-db-data:
  sales-db-data:
  store-db-data:
  user-db-data:
