services:
  # Redis Cache Distribu√©
  redis:
    image: redis:7-alpine
    container_name: log430-lab0-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network
    environment:
      REDIS_REPLICATION_MODE: master

  # Traefik API Gateway
  traefik:
    image: traefik:v3.0
    container_name: log430-lab0-traefik
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./logs:/var/log/traefik
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: docker.io/${DOCKER_USERNAME:-local}/log430-frontend:latest
    depends_on:
      - inventory-service
      - sales-service
      - store-service
      - user-service
    environment:
      VITE_API_URL: http://localhost/api
      Node_ENV: development
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  # Inventory Microservice
  inventory-service:
    build:
      context: ./micro-services/inventory-service
      dockerfile: Dockerfile
    depends_on:
      inventory-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@inventory-postgres:5432/inventory_db
      NODE_ENV: production
      PORT: 3033
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inventory.rule=Host(`localhost`) && PathPrefix(`/api/products`)"
      - "traefik.http.routers.inventory.entrypoints=web"
      - "traefik.http.routers.inventory.middlewares=api-key-check,rate-limit,compression"
      - "traefik.http.services.inventory.loadbalancer.server.port=3033"

  # Inventory Database
  inventory-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: inventory_db
    volumes:
      - inventory-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d inventory_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Sales Microservice  
  sales-service:
    build:
      context: ./micro-services/sales-service
      dockerfile: Dockerfile
    depends_on:
      sales-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@sales-postgres:5432/sales_db
      NODE_ENV: production
      PORT: 3034
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sales.rule=Host(`localhost`) && (PathPrefix(`/api/sales`) || PathPrefix(`/api/returns`))"
      - "traefik.http.routers.sales.entrypoints=web"
      - "traefik.http.routers.sales.middlewares=api-key-check,rate-limit,compression"
      - "traefik.http.services.sales.loadbalancer.server.port=3034"

  # Sales Database
  sales-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: sales_db
    volumes:
      - sales-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d sales_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Store Microservice
  store-service:
    build:
      context: ./micro-services/store-service
      dockerfile: Dockerfile
    depends_on:
      store-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@store-postgres:5432/store_db
      NODE_ENV: production
      PORT: 3035
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.store.rule=Host(`localhost`) && (PathPrefix(`/api/stores`) || PathPrefix(`/api/stock`))"
      - "traefik.http.routers.store.entrypoints=web"
      - "traefik.http.routers.store.middlewares=store-headers"
      - "traefik.http.services.store.loadbalancer.server.port=3035"

  # Store Database
  store-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: store_db
    volumes:
      - store-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d store_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # User Microservice
  user-service:
    build:
      context: ./micro-services/user-service
      dockerfile: Dockerfile
    depends_on:
      user-postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@user-postgres:5432/user_db
      NODE_ENV: production
      PORT: 3036
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=Host(`localhost`) && (PathPrefix(`/api/auth`) || PathPrefix(`/api/users`))"
      - "traefik.http.routers.user.entrypoints=web"
      - "traefik.http.services.user.loadbalancer.server.port=3036"
      - "traefik.http.routers.user-docs.rule=Host(`localhost`) && PathPrefix(`/docs/user`)"
      - "traefik.http.routers.user-docs.entrypoints=web"
      - "traefik.http.routers.user-docs.middlewares=user-docs-stripprefix"
      - "traefik.http.routers.user-docs.service=user"
      - "traefik.http.middlewares.user-docs-stripprefix.stripprefix.prefixes=/docs/user"

  # User Database
  user-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: user_db
    volumes:
      - user-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d user_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  grafana-data:
  redis-data:
  inventory-db-data:
  sales-db-data:
  store-db-data:
  user-db-data:
