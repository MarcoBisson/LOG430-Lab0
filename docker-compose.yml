services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: posdb
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d posdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis Cache Distribu√©
  redis:
    image: redis:7-alpine
    container_name: log430-lab0-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network
    environment:
      REDIS_REPLICATION_MODE: master

  # NGINX Load Balancer avec cache Redis
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '80:80'
    depends_on:
      redis:
        condition: service_healthy
      backend-1:
        condition: service_started
      backend-2:
        condition: service_started
      frontend:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./nginx/logs:/var/log/nginx
    networks:
      - app-network

  backend-1:
    build:
      context: .
      dockerfile: src/backend/Dockerfile
    image: docker.io/${DOCKER_USERNAME:-local}/log430-backend:latest
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@db:5432/posdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_ENV: production
      INSTANCE_ID: backend-1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
    networks:
      - app-network

  backend-2:
    build:
      context: .
      dockerfile: src/backend/Dockerfile
    image: docker.io/${DOCKER_USERNAME:-local}/log430-backend:latest
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://admin:admin@db:5432/posdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_ENV: production
      INSTANCE_ID: backend-2
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
    networks:
      - app-network

  # backend-3:
  #   build:
  #     context: .
  #     dockerfile: src/backend/Dockerfile
  #   image: docker.io/${DOCKER_USERNAME:-local}/log430-backend:latest
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://admin:admin@db:5432/posdb
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     NODE_ENV: production
  #     INSTANCE_ID: backend-3
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #   networks:
  #     - app-network

  # backend-4:
  #   build:
  #     context: .
  #     dockerfile: src/backend/Dockerfile
  #   image: docker.io/${DOCKER_USERNAME:-local}/log430-backend:latest
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://admin:admin@db:5432/posdb
  #     NODE_ENV: production
  #     INSTANCE_ID: backend-4
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #   networks:
  #     - app-network

  # backend-5:
  #   build:
  #     context: .
  #     dockerfile: src/backend/Dockerfile
  #   image: docker.io/${DOCKER_USERNAME:-local}/log430-backend:latest
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://admin:admin@db:5432/posdb
  #     NODE_ENV: production
  #     INSTANCE_ID: backend-4
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #   networks:
  #     - app-network

  frontend:
    build:
      context: .
      dockerfile: src/frontend/Dockerfile
    image: docker.io/${DOCKER_USERNAME:-local}/log430-frontend:latest
    depends_on:
      - backend-1
      - backend-2
      # - backend-3
      # - backend-4
      # - backend-5
    environment:
      VITE_API_URL: http://localhost/api
      Node_ENV: development
    restart: unless-stopped
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  grafana-data:
  redis-data:
